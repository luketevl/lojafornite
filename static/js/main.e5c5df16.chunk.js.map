{"version":3,"sources":["api.js","components/Shop/Item/Item.js","containers/Items/Items.js","App.js","serviceWorker.js","index.js"],"names":["storeNow","a","console","log","fetch","process","data","json","result","Image","styled","img","Card","div","Item","url","src","alt","Items","props","state","items","getData","api","then","setState","this","map","item","key","Component","Main","main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wSAUe,GACbA,SAVY,uCAAG,8BAAAC,EAAA,6DACfC,QAAQC,IAAI,GADG,SAEIC,MAAM,GAAD,OAHVC,iDAGU,qBAFT,cAETC,EAFS,OAGfJ,QAAQC,IAAI,EAAGG,GAHA,SAIMA,EAAKC,OAJX,cAITC,EAJS,OAKfN,QAAQC,IAAI,GALG,kBAMRK,GANQ,4CAAH,sD,wcCEd,IAAMC,EAAQC,IAAOC,IAAV,KAGLC,EAAOF,IAAOG,IAAV,KAoBKC,EALF,SAAC,GAAD,IAAGC,EAAH,EAAGA,IAAH,OACX,kBAACH,EAAD,KACE,kBAACH,EAAD,CAAOO,IAAKD,EAAKE,IAAI,UCnBJC,E,YAInB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAJRC,MAAQ,CACNC,MAAO,IAKPnB,QAAQC,IAAI,GACZ,EAAKmB,UACJpB,QAAQC,IAAI,GALI,E,uEAQT,IAAD,OACPoB,EAAIvB,WAAWwB,MAAK,SAAAH,GAAK,OAAI,EAAKI,SAAS,CAACJ,e,+BAK5C,OADAnB,QAAQC,IAAIuB,KAAKN,MAAMC,OAErBK,KAAKN,MAAMC,MAAMM,KAAI,SAACC,EAAMC,GAAP,OAAe,kBAAC,EAAD,CAAMd,IAAKa,EAAMC,IAAKA,W,GAnB7BC,a,6RCAnC,IAAMC,EAAOrB,IAAOsB,KAAV,KAmBKC,EANH,kBACV,kBAACF,EAAD,KACE,kBAAC,EAAD,QCPgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.e5c5df16.chunk.js","sourcesContent":["const API_URL = process.env.REACT_APP_API || 'http://localhost:8081/api/'\nconst storeNow = async () => {\n  console.log(2)\n  const data = await fetch(`${API_URL}fornite/shop/now`)\n  console.log(3, data)\n  const result = await data.json()\n  console.log(4)\n  return result\n}\n\nexport default {\n  storeNow\n}","import React from 'react'\nimport styled from 'styled-components'\n\nconst Image = styled.img`\n  max-width: 100%;\n`\nconst Card = styled.div`\n  padding: 5px;\n  box-shadow: 0px 0px 20px -6px rgba(0,0,0,0.62);\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: #fff;\n  transition-duration: 0.2s;\n  transition-timing-function: ease-in;\n  cursor: pointer;\n  &:hover {\n    transform: scale(1.5)\n  }\n`\n\nconst Item = ({ url }) => (\n  <Card>\n    <Image src={url} alt=\"alt\" />\n  </Card>\n)\nexport default Item","import React, { Component } from 'react'\nimport api from './../../api';\nimport Item from './../../components/Shop/Item/Item'\n\nexport default class Items extends Component {\n  state = {\n    items: []\n  }\n  constructor(props) {\n    super(props)\n    \n    console.log(1)\n    this.getData();\n     console.log(5)\n  }\n\n  getData(){\n    api.storeNow().then(items => this.setState({items}))\n\n  }\n  render() {\n    console.log(this.state.items);\n    return (\n      this.state.items.map((item, key) => <Item url={item} key={key} />)\n    )\n  }\n}","import React from 'react'\nimport styled from 'styled-components'\nimport Items from './containers/Items/Items'\n\nconst Main = styled.main`\n  padding: 0;\n  margin: 0;\n  grid-gap: 21px;\n  min-height: 100vh;\n  width: 100vw;\n  display: grid;\n  align-content: center;\n  justify-content: center;\n  grid-template-columns: repeat(auto-fit, 230px);\n  \n`\n\nconst App = () => (\n  <Main>\n    <Items />\n  </Main>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}